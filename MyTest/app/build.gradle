apply plugin: 'com.android.application'


//加载资源>signing.properties
def getLocalProperty() {

    Properties properties = new Properties()
//    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream() ;
    properties.load(new FileInputStream(file(rootProject.file("signing.properties"))))
    return properties;
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86_64"
        }
    }


    Properties properties = getLocalProperty();
    /*//读取local.properties中字段
    def key_file = properties.getProperty('key.file')
    def key_keyAlias = properties.getProperty( 'keyAlias' )
    def key_keyPassword = properties.getProperty( 'keyPassword' ) ;
    def key_storePassword = properties.getProperty( 'storePassword' ) ;*/

    def key_file = properties['key.file']
    def key_keyAlias = properties['keyAlias']
    def key_keyPassword = properties['keyPassword'];
    def key_storePassword = properties['storePassword'];
    //签名配置
    signingConfigs {
        config {
            keyAlias key_keyAlias
            keyPassword key_keyPassword
            storeFile file(key_file)
            storePassword key_storePassword
        }

    }

    buildTypes {

        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            //自定义变量
//            buildConfigField("com.zwx.app.utils.stetho.StethoHelper", "STETHO", "new com.zwx.app.utils.stetho.ReleaseStethoHelper()")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            debuggable false
//            applicationIdSuffix '.release'   //是否分测试和正式包

        }

        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
//            buildConfigField("com.zwx.app.utils.stetho.StethoHelper", "STETHO", "new com.zwx.app.DebugStethoHelper()")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.config

            //应用id后缀(给Applica)
//            applicationIdSuffix '.debug'
            //是否生成一个debug的apk
            debuggable true
        }
    }
/*    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }*/

    //编译Java版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    android {
        /*flavorDimensions "zwxqrc"
        productFlavors {
            //三个渠道
            huawei {}       // 华为商店
            baidu {
                dimension "zwxqrc"
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "huawei", app_name: "zwxqrc"]
            }        // 百度手机助手
            yinyongbao {
                dimension "zwxqrc"
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao", app_name: "zwxqrc"]

            }   // 应用宝

            xiaomi {
                dimension "zwxqrc"
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi", app_name: "zwxqrc"]
            }
        }

        // 批量渠道包值替换（有些第三方库中需要用到渠道名）
        productFlavors.all { flavor ->
            // 友盟、极光推送渠道包， UMENG_CHANNEL 是根据你AndroidManifest.xml来配置的，请看下面。
//            flavor.manifestPlaceholders = [UMENG_CHANNEL: name, JPUSH_CHANNEL: name]
            flavor.manifestPlaceholders = [IFLYTEK_CHANNEL: name]
        }*/
    }

    // 输出文件配置，格式如下：app-{版本号}-{渠道名称}.apk
    /* applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def dirName = outputFile.parent // 输出文件夹所在的位置
            def fileName;
            if (outputFile != null && outputFile.name.endsWith('.apk') && 'release'.equals(variant.buildType.name)) {


                // 文件名修改
                 fileName = "zwx_v${defaultConfig.versionName}_${releaseTime()}_release.apk"
                output.outputFile = new File(dirName, fileName)
            }else{
                fileName = "zwx_v${defaultConfig.versionName}_${releaseTime()}_debug.apk"

                output.outputFile = new File(dirName, fileName)
            }

        }
    }*/
    //自定义apk名称含版本号信息
    android.applicationVariants.all { variant ->
        // 更新至Android Studio 3.3 gradle 4.10.1
        variant.outputs.all {
//            outputFileName = "cql_v${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
            def apkName  = "instalment_v${variant.versionName}_${releaseTime()}"
            if (!variant.buildType.isDebuggable() && "release".equals(variant.buildType.name)) {
                outputFileName = apkName + "_release" + ".apk";
            } else {
                outputFileName = apkName + "_debug" + ".apk";
            }
        }
        /* variant.outputs.all { output ->
             def outputFile = output.outputFile
             if (outputFile != null && outputFile.name.endsWith('.apk')) {
                 // 输出apk名称为zwx_v1.0_2018-08-24_release.apk
                 def fileNameSuffix = "zwxqrc_v${defaultConfig.versionName}_${releaseTime()}"
                 def apkName = null;
 //                if(outputFile !=null && outputFile.name.endsWith(".apk") && "release".equals(variant.buildType.name)){
                 if (outputFile != null && !variant.buildType.debuggable && "release".equals(variant.buildType.name)) {
                     apkName = fileNameSuffix + "_release" + ".apk";

                 } else {
                     apkName = fileNameSuffix + "_debug" + ".apk";
                 }
                 outputFileName = apkName;
             }
         }*/
    }


    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation rootProject.ext.config["constraint-layout"]
//    implementation rootProject.ext.config["support-v4"]
//    implementation rootProject.ext.config["appcompat-v7"]
//    implementation rootProject.ext.config["gson"]
    //权限设置
    implementation rootProject.ext.config["rxpermissions"]

    implementation rootProject.ext.config["butterknife"]
    annotationProcessor rootProject.ext.config["butterknife-compiler"]

    implementation rootProject.ext.config["dagger"]
    annotationProcessor rootProject.ext.config["dagger-compiler"]

    api rootProject.ext.config["rxandroid"]
    api rootProject.ext.config["rxbinding"]
    api rootProject.ext.config["retrofit"]
    api rootProject.ext.config["retrofit-converters"]
    api rootProject.ext.config["adapter-rxjava"]
    api rootProject.ext.config["converter-gson"]
    api rootProject.ext.config["logging-interceptor"]

    api rootProject.ext.config["rxlifecycle"]
    api rootProject.ext.config["rxlifecycle-android"]
    api rootProject.ext.config["rxlifecycle-components"]

    debugImplementation rootProject.ext.config["stetho"]
    debugImplementation rootProject.ext.config["stetho-okhttp3"]
    api rootProject.ext.config["eventbus"]

//    implementation project(":qmui")


    //leak
    debugImplementation rootProject.ext.config["leakcanary"]
    releaseImplementation rootProject.ext.config["leakcanary-release"]
    testImplementation rootProject.ext.config["leakcanary-release"]

    testImplementation rootProject.ext.config["junit"]

//    implementation "com.android.tools.lint:lint-api:26.4.2"
//    implementation "com.android.tools.lint:lint-checks:26.4.2"
    api 'com.squareup:javapoet:1.10.0'
    api 'com.google.auto.service:auto-service:1.0-rc5'
    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc5'

    implementation project(':lib')
//    implementation project(':qmuilint')

    lintChecks project(':qmuilintrule')
    implementation project(':qmui')
    implementation project(':arch')
    annotationProcessor project(':compiler')
    annotationProcessor project(':arch-compiler')
}


/*android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.zwx.app"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}*/
